from .BasePrompt import BasePrompt
class FLocationQuery(BasePrompt):
    def __init__(self,loc_imgs) -> None:
        '''
            loc_imgs: dict of images of locations in the scene graph. The key is the name of the node in the scene graph and the value is the image path.
            scene_graph: scene graph of the location in text-serialized format.
            llm_scenario_out: output of the scenario generated by llm, parsed into a dictionary.
        '''
        super().__init__()
        
        self.background = """
A scenario for humans and robot is being created in a social-navigation simulator. The location where the scenario takes place has the following scene graph: 
<SCENE GRAPH>

The Scenario is described below, with the number of humans involved and their ROUGH trajectories defined using scene graph nodes.
[Scenario Description]: <SCENARIO DESCRIPTION>
[Number of Humans]: <NUMBER OF HUMANS>
<TRAJECTORIES>

The images show more scene graph nodes around nodes describing the rough trajectories as well as an overhead view with all the locations. Note that each "fine" location is described by the parent-node and a letter (e.g. 1A, 2B).
Your job is to specify fine trajectories through the "fine" scene graph nodes for each rough trajectory as well as group membership for the humans (if required) such that the described Scenario is guaranteed to happen.
Assume that the humans and the robot start moving at the same time and they move at the same speed.
Rules:
    - A human can be a member of a single group only. 
    - Groups are identified by a single integer called group_id and Humans with the same group_id will dynamically form a group in the simulation.
    - For a lone human, set group_id = -1 and some other number for all the humans belonging to the same group.
    - Only specify waypoints in the trajectory with nodes from the scene graph with type="child"
"""
        self.output_format = """
STRICTLY ADHERE TO THE FOLLOWING FORMAT FOR THE OUTPUT. Do not include any explanation.

{'Trajectory':
    {
        'Human 1': <comma-separated list of child scene graph nodes>,
        'Human 2': ...,
        ...
    },
'Group':
    {
        'Human 1': <group_id>,
        'Human 2': <group_id>,
       ...
    }
}"""    
        self.imgs = loc_imgs
        
    def get_full_prompt(self,**kwargs):
        full_prompt = self.background
        trajectories = ""
        for i in range(1,kwargs['num_humans']+1):
            trajectories += f"""\n[Human {i} Trajectory]: {' -> '.join(kwargs['traj_desc'][f'Human {i}'])}
            """ 
        trajectories += f"""\n[Robot Trajectory]: {' -> '.join(kwargs['traj_desc']['Robot'])}"""
        trajectories+="\n"
        full_prompt = full_prompt.replace('<SCENARIO DESCRIPTION>',kwargs['sc_desc'])
        full_prompt = full_prompt.replace('<NUMBER OF HUMANS>',str(kwargs['num_humans']))
        full_prompt = full_prompt.replace('<TRAJECTORIES>',trajectories)
        full_prompt = full_prompt.replace('<SCENE GRAPH>',kwargs['scene_graph'])
        full_prompt += self.output_format
        prompt =  dict(
            system = self.system_prompt,
            user = [])
        for img in self.imgs:
            prompt['user'].append({'type':'img',
                                   'content':img,
                                   'detail':'high'})
        prompt['user'].append({
            'type':'text',
            'content':full_prompt})
        return prompt
            