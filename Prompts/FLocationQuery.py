from .BasePrompt import BasePrompt
class FLocationQuery(BasePrompt):
    def __init__(self,loc_imgs) -> None:
        '''
            loc_imgs: dict of images of locations in the scene graph. The key is the name of the node in the scene graph and the value is the image path.
            scene_graph: scene graph of the location in text-serialized format.
            llm_scenario_out: output of the scenario generated by llm, parsed into a dictionary.
        '''
        super().__init__()
        
        self.background = """
A scenario for humans and robot is being created in a social-navigation simulator. The location where the scenario takes place has the following scene graph, where the nodes specify rough locations: 
[Scene Graph]:<SCENE GRAPH>
The Scenario is described below, with the number of humans involved and their trajectories defined using the scene graph nodes.
[Scenario Description]: <SCENARIO DESCRIPTION>
[Number of Humans]: <NUMBER OF HUMANS>
<TRAJECTORIES>

The images show finer locations around the scene graph nodes.
Your job is to specify the start, goal and waypoints for the Robot and Humans such that the Described Scenario is guaranteed to happen as well as group membership for the humans if required. The humans and the robot start moving at the same time. Assume they move at the same speed.
A human can be a member of a single group only. Groups are identified by a single integer called group_id. If a human is not a member of any group, then set group_id = -1. Thus, humans with the same group_id dynamically form a group in the simulation.
When specifying finer locations, use the following format: (CoarseLocation-FineLocation). For example, 1A, 2B etc.
"""
        self.output_format = """
STRICTLY ADHERE TO THE FOLLOWING FORMAT FOR THE OUTPUT. Do not include any explanation.

{'Trajectory':
    {
        'Robot': "Start -> Goal",
        'Human 1': "Start ->  Waypoints -> Goal",
        'Human 2': "Start -> Waypoints -> Goal",
        ...
    },
'Group':
    {
        'Human 1': -1,
        'Human 2': 0,
       ...
    }
}"""    
        self.imgs = loc_imgs
        
    def get_full_prompt(self,**kwargs):
        full_prompt = self.background
        trajectories = ""
        for i in range(1,kwargs['num_humans']+1):
            trajectories += f"""\n[Human {i} Trajectory]: {' -> '.join(kwargs['traj_desc'][f'Human {i}'])}
            """ 
        trajectories += f"""\n[Robot Trajectory]: {' -> '.join(kwargs['traj_desc']['Robot'])}"""
        trajectories+="\n"
        full_prompt = full_prompt.replace('<SCENARIO DESCRIPTION>',kwargs['sc_desc'])
        full_prompt = full_prompt.replace('<NUMBER OF HUMANS>',str(kwargs['num_humans']))
        full_prompt = full_prompt.replace('<TRAJECTORIES>',trajectories)
        full_prompt = full_prompt.replace('<SCENE GRAPH>',kwargs['scene_graph'])
        full_prompt += self.output_format
        prompt =  dict(
            system = self.system_prompt,
            user = [])
        for img in self.imgs:
            prompt['user'].append({'type':'img',
                                   'content':img,
                                   'detail':'high'})
        prompt['user'].append({
            'type':'text',
            'content':full_prompt})
        return prompt
            