{"NODE_NAME": "SlowNav", "NODE_TYPE": "ACTION", "NODE_DEFINITION": "BT::NodeStatus BTfunctions::slowNav(BT::TreeNode &self)\n{\n  auto msg = self.getInput<int>(\"agent_id\");\n  auto msg2 = self.getInput<double>(\"time_step\");\n  if (!msg)\n  {\n    throw BT::RuntimeError(\"SlowNav. missing required input [agent_id]: \",\n                           msg.error());\n  }\n  if (!msg2)\n  {\n    throw BT::RuntimeError(\"SlowNav. missing required input [time_step]: \",\n                           msg2.error());\n  }\n\n  int id = msg.value();\n  double dt = msg2.value();\n  agent_manager_.slowNavigation(id, dt);\n  return BT::NodeStatus::SUCCESS;\n}", "NODE_HEADER": "BT::NodeStatus slowNav(BT::TreeNode &self);", "PORTS_USED": ["agent_id", "time_step"], "AUX_FUNCTIONS": ["void AgentManager::slowNavigation(int id, double dt)\n{\n  std::lock_guard<std::mutex> guard(mutex_);\n\n  // Reduce the maximum speed by half while maintaining the current direction and goals\n  double reduced_speed = agents_[id].sfmAgent.desiredVelocity * 0.5;\n\n  // Temporarily set the agent's desired velocity to reduced speed\n  double original_speed = agents_[id].sfmAgent.desiredVelocity;\n  agents_[id].sfmAgent.desiredVelocity = reduced_speed;\n\n  // Recompute forces with reduced desired velocity\n  computeForces(id);\n\n  // Update position with reduced time step\n  sfm::SFM.updatePosition(agents_[id].sfmAgent, dt * 0.5);\n\n  // Restore the original desired velocity\n  agents_[id].sfmAgent.desiredVelocity = original_speed;\n}"], "AUX_FUNCTION_HEADERS": ["void slowNavigation(int id, double dt);"]}