{"NODE_NAME": "HeardProceed", "NODE_TYPE": "CONDITION", "NODE_DEFINITION": "\nBT::NodeStatus BTfunctions::heardProceed(BT::TreeNode &self)\n{\n  auto msg = self.getInput<int>(\"agent_id\");\n  if (!msg)\n  {\n    throw BT::RuntimeError(\"heardProceed. missing required input [agent_id]: \",\n                           msg.error());\n  }\n  int id = msg.value();\n\n  if (agent_manager_.hasHeardCommand(id, \"PROCEED\"))\n  {\n    return BT::NodeStatus::SUCCESS;\n  }\n  else\n  {\n    return BT::NodeStatus::FAILURE;\n  }\n}\n", "NODE_HEADER": "BT::NodeStatus heardProceed(BT::TreeNode &self);", "PORTS_USED": ["agent_id"], "AUX_FUNCTIONS": ["\nbool AgentManager::hasHeardCommand(int id, std::string command)\n{\n  std::lock_guard<std::mutex> guard(mutex_);\n  // Usually, a real implementation would involve checking some internal state or receiving information from the robot.\n  // This is a placeholder example. Replace with actual implementation as required.\n  return commandHistory[id] == command;\n}\n"], "AUX_FUNCTION_HEADERS": ["bool hasHeardCommand(int id, std::string command);"]}